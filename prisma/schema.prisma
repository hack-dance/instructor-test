generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model ParticipantInvite {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email    String
  accepted Boolean @default(false)

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  @@unique([email, conversationId])
  @@index([conversationId])
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  externalId String? @unique

  firstName String?
  lastName  String?
  email     String? @unique
  avatarUrl String?
  phone     String?
  ip        String?
  state     String?

  archived Boolean @default(false)

  primaryConversations     Conversation[] @relation("PrimaryUser")
  participantConversations Conversation[] @relation("Participants")

  Message             Message[]
  ConversationSummary ConversationSummary[]
  StarItem            StarItem[]
}

model ActionPlan {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  greeting               String  @db.LongText
  conversationHighlights String? @db.LongText
  customizedLeavePlan    String? @db.LongText
  actionPlan             String? @db.LongText
  resourcesAndTemplates  String? @db.LongText
  faqsAndTips            String? @db.LongText
  relevantLinks          String? @db.LongText
  disclaimers            String? @db.LongText

  Conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String       @unique

  @@index([conversationId])
}

model Conversation {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  summarizedUntil DateTime?

  title    String?
  archived Boolean @default(false)

  userId String
  user   User   @relation(name: "PrimaryUser", fields: [userId], references: [id])

  participants User[] @relation(name: "Participants")
  artifacts    Json?

  messages            Message[]
  ConversationSummary ConversationSummary[]
  ParticipantInvite   ParticipantInvite[]
  StarItem            StarItem[]

  actionPlan ActionPlan?

  @@index([userId])
}

model ConversationSummary {
  id                String       @id @default(uuid())
  createdAt         DateTime     @default(now())
  conversationId    String
  conversation      Conversation @relation(fields: [conversationId], references: [id])
  startingMessageId String       @unique()
  endingMessageId   String       @unique()
  from              DateTime
  to                DateTime
  messageCount      Int
  summary           String       @db.LongText
  tokenCount        Int
  userId            String
  user              User         @relation(fields: [userId], references: [id])

  @@index([conversationId], name: "conversationId")
  @@index([userId], name: "userId")
}

model Message {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conversationId String

  content String      @db.LongText
  role    MessageRole @default(user)

  tokenCount Int
  summarized Boolean @default(false)

  artifacts Json?

  conversation Conversation @relation(fields: [conversationId], references: [id])

  authorId String?
  author   User?       @relation(fields: [authorId], references: [id])
  type     MessageType @default(TEXT)
  starItem StarItem?

  @@index([conversationId])
  @@index([authorId])
}

model StarItem {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  type StarItemType

  text String?

  title  String?
  linkId String?

  messageId String?  @unique
  message   Message? @relation(fields: [messageId], references: [id])

  url String?

  @@index([conversationId])
  @@index([userId])
  @@index([messageId])
}

enum StarItemType {
  MESSAGE
  LINK
  TEXT
}

enum MessageType {
  TEXT
  MARKDOWN
}

enum MessageRole {
  user
  assistant
  system
  function
}
